"""
Mini-max Tic-Tac-Toe Player
Author: Yusuf Tatlier
"""

#http://www.codeskulptor.org/#user43_jO9JiAUMaZ_13.py

import poc_ttt_gui
import poc_ttt_provided as provided

# Set timeout, as mini-max can take a long time
import codeskulptor
codeskulptor.set_timeout(60)

# SCORING VALUES - DO NOT MODIFY
SCORES = {provided.PLAYERX: 1,
          provided.DRAW: 0,
          provided.PLAYERO: -1}

def mm_move(board, player):
    """
    Make a move on the board.
    
    Returns a tuple with two elements.  The first element is the score
    of the given board and the second element is the desired move as a
    tuple, (row, col).
    """
    if(board.check_win()!=None):
        return (SCORES[board.check_win()], (-1, -1))
    else:
        best_score=(-2,(-1,-1))
        for square in board.get_empty_squares():
            
            clone_board=board.clone()
            clone_board.move(square[0],square[1],player)
            square_score=mm_move(clone_board,provided.switch_player(player))
           
            multiplied_score=square_score[0]*SCORES[player]
            
            if(multiplied_score==1):
                return (square_score[0],square)
            else:
                if(multiplied_score>best_score[0]):
                    best_score=(multiplied_score,square)
        return (SCORES[player] * best_score[0], best_score[1])

def move_wrapper(board, player, trials):
    """
    Wrapper to allow the use of the same infrastructure that was used
    for Monte Carlo Tic-Tac-Toe.
    """
    move = mm_move(board, player)
    assert move[1] != (-1, -1), "returned illegal move (-1, -1)"
    return move[1]

# Test game with the console or the GUI.
# Uncomment whichever you prefer.
# Both should be commented out when you submit for
# testing to save time.
