http://www.codeskulptor.org/#user43_UDM1cdd9Ql_3.py

"""
Student code for Word Wrangler game
"""

import urllib2
import codeskulptor
import poc_wrangler_provided as provided

WORDFILE = "assets_scrabble_words3.txt"


# Functions to manipulate ordered word lists

def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.

    Returns a new sorted list with the same elements in list1, but
    with no duplicates.

    This function can be iterative.
    """
    unique_list=[]
    
    for element in list1:
        if element not in unique_list:
            unique_list.append(element)
    
    list1=merge_sort(unique_list)
    return list1

def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.

    Returns a new sorted list containing only elements that are in
    both list1 and list2.

    This function can be iterative.
    """
    intersect_list=[]
    
    for element1 in list1:
        for element2 in list2:
            if(element1==element2):
                intersect_list.append(element1)
                
    intersect_list=merge_sort(intersect_list)
    return intersect_list

# Functions to perform merge sort

def merge(list1, list2):
    """
    Merge two sorted lists.

    Returns a new sorted list containing those elements that are in
    either list1 or list2.

    This function can be iterative.
    """   
    total_list=[]
    element_i,element_j = 0,0
    
    while True:
        if(element_i==len(list1)):
            return total_list+list2[element_j:]
        elif(element_j==len(list2)):
            return total_list+list1[element_i:]
        
        if(list1[element_i]>list2[element_j]):
            total_list.append(list2[element_j])
            element_j += 1
        else:
            total_list.append(list1[element_i])
            element_i += 1
                
def merge_sort(list1):
    """
    Sort the elements of list1.

    Return a new sorted list with the same elements as list1.

    This function should be recursive.
    """
    length=len(list1)
    mid=length/2
    
    if(length<2):
        return list1
    else:
        left_testlist=merge_sort(list1[:mid])
        right_testlist=merge_sort(list1[mid:])
    merged_list=merge(left_testlist,right_testlist)
    return merged_list

# Function to generate all strings for the word wrangler game

def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.

    Returns a list of all strings that can be formed from the letters
    in word.

    This function should be recursive.
    """
    if(len(word)<1):
        return([''])
    else:
        first=word[0]
        rest_strings=gen_all_strings(word[1:])
        rest_strings_copy=rest_strings[:]
        
        for string in rest_strings:
            for place_first in range(len(string)+1):
                new_word=string[:place_first]+first+string[place_first:]
                rest_strings_copy.append(new_word)
        
    return rest_strings_copy

    #return rest_strings_copy

# Function to load words from a file

def load_words(filename):
    """
    Load word list from the file named filename.

    Returns a list of strings.
    """
    return []

def run():
    """
    Run game.
    """
    words = load_words(WORDFILE)
    wrangler = provided.WordWrangler(words, remove_duplicates, 
                                     intersect, merge_sort, 
                                     gen_all_strings)
    provided.run_game(wrangler)

# Uncomment when you are ready to try the game
# run()

#testlist=gen_all_strings('word')
#print testlist
#print len(testlist)